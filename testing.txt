Unit Testing methods: 
1. Test for end of file if there is no more data to read in the data txt file in "read_kreature" function.
2. Run various tests on the "kreature_rarity" function to see if it'll ever return the error bypass message.
3. Test for type casting when adding up the "monetary_values", as they are read in as strings instead of ints.

// Driver Program for unit testing:
// NOTE: add an if-statement in the "read_kreature" function to test for end of file
map <string, array<list<string>, 3>> collection;
ifstream fin("Krazy-Kreatures-Beta-Kreatures.txt") // new data txt file will be created with more data to test with
// use a static int to hold the total 
for (int i = 0; i < 1000; i++){
    read_kreature(collection, fin); // may need to alter read_kreature from void to an int type function to test for returning an error/end of file
    if (read_kreature == 1){ // since kreature_rarity is called in read_kreature, it should also test the rarity function
        break;
    }
} 

output_collection(collection); // call output collection to check for any errors that may have possibly been outputted

